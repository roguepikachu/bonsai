name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

    - name: Run linter
      run: make lint

  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests with coverage
      run: make test-unit

    - name: Cleanup test artifacts
      if: always()
      run: |
        rm -f coverage*.out coverage*.html
        go clean -testcache

    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      with:
        name: unit-coverage
        path: coverage.out

  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: bonsai
          POSTGRES_PASSWORD: bonsai
          POSTGRES_DB: bonsai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run integration tests with coverage
      run: make test-integration
      env:
        CI: true
        DATABASE_URL: postgres://bonsai:bonsai@localhost:${{ job.services.postgres.ports[5432] }}/bonsai_test?sslmode=disable
        REDIS_URL: redis://localhost:${{ job.services.redis.ports[6379] }}

    - name: Cleanup test resources
      if: always()
      run: |
        # Clean up test data from PostgreSQL
        PGPASSWORD=bonsai psql -h localhost -p ${{ job.services.postgres.ports[5432] }} -U bonsai -d bonsai_test -c "TRUNCATE TABLE IF EXISTS snippets CASCADE;" || true
        # Clean up Redis cache
        redis-cli -h localhost -p ${{ job.services.redis.ports[6379] }} FLUSHALL || true
        # Clean up test artifacts
        rm -f coverage*.out coverage*.html
        go clean -testcache

    - name: Upload integration test coverage
      uses: actions/upload-artifact@v4
      with:
        name: integration-coverage
        path: coverage-integration.out

  acceptance-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bonsai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run acceptance tests
      run: make test-acceptance
      env:
        CI: true
        DATABASE_URL: postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/bonsai?sslmode=disable
        REDIS_URL: redis://localhost:${{ job.services.redis.ports[6379] }}
        REDIS_PORT: ${{ job.services.redis.ports[6379] }}
        BONSAI_PORT: 8080

    - name: Cleanup test resources
      if: always()
      run: |
        # Clean up test databases
        PGPASSWORD=postgres psql -h localhost -p ${{ job.services.postgres.ports[5432] }} -U postgres -c "DROP DATABASE IF EXISTS bonsai_test;" || true
        PGPASSWORD=postgres psql -h localhost -p ${{ job.services.postgres.ports[5432] }} -U postgres -d bonsai -c "TRUNCATE TABLE IF EXISTS snippets CASCADE;" || true
        # Clean up Redis cache  
        redis-cli -h localhost -p ${{ job.services.redis.ports[6379] }} FLUSHALL || true
        # Clean up test artifacts
        rm -f coverage*.out coverage*.html
        go clean -testcache
        # Kill any orphaned test server processes
        pkill -f "go test" || true

  coverage-report:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Download unit test coverage
      uses: actions/download-artifact@v4
      with:
        name: unit-coverage

    - name: Download integration test coverage
      uses: actions/download-artifact@v4
      with:
        name: integration-coverage

    - name: Merge coverage reports
      run: |
        echo "mode: atomic" > coverage-merged.out
        tail -n +2 coverage.out >> coverage-merged.out
        tail -n +2 coverage-integration.out >> coverage-merged.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage-merged.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: go tool cover -html=coverage-merged.out -o coverage.html

    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

    - name: Final cleanup
      if: always()
      run: |
        rm -f coverage*.out coverage*.html
        go clean -testcache -modcache

  cleanup:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, acceptance-tests, coverage-report]
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up workflow artifacts..."
        
    - name: Clean up caches
      run: |
        echo "Cache cleanup handled by GitHub automatically after 7 days of inactivity"